<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Duan&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/dc2e3610e9ab9aa4341fa839e3317f1b</icon>
  <subtitle>一个很菜的程序员</subtitle>
  <link href="http://duan8.xyz/atom.xml" rel="self"/>
  
  <link href="http://duan8.xyz/"/>
  <updated>2020-10-28T15:28:30.031Z</updated>
  <id>http://duan8.xyz/</id>
  
  <author>
    <name>Vayne Duan</name>
    <email>vayneduan@foxmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第6章-处理器调度</title>
    <link href="http://duan8.xyz/posts/50af1856.html"/>
    <id>http://duan8.xyz/posts/50af1856.html</id>
    <published>2020-10-28T14:02:00.000Z</published>
    <updated>2020-10-28T15:28:30.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><ul><li><p> <a href="https://blog.csdn.net/qq_19018277/article/details/98738492" title="参考">博主参考的详细文章</a></p></li><li><p> <strong>CPU利用率</strong> CPU工作时间 / 总时间</p></li><li><p> <strong>吞吐量</strong> 单位时间内完成进程的数量 完成作业量 / 总时间</p></li><li><p><strong>周转时间</strong> 进程到达-&gt;进程完成 (作业完成时间点−作业提交时间点)</p><ul><li>平均周转时间</li><li><strong>平均带权周转时间</strong>(主要用于表征满意度) 周转时间 / 实际进行时间, 显然, 这 ≥ 1</li></ul></li><li><p> <strong>响应时间</strong> 单个进程到达-&gt;被处理</p></li><li><p><strong>等待时间</strong> 所有进程的相应时间的总和</p><ul><li>平均等待时间</li></ul></li><li><p><strong>抢占式调度</strong></p><ul><li>当前运行的进程可能被系统中断, 转为就绪态</li></ul></li><li><p><strong>非抢占式调度</strong></p><ul><li>only进程主动释放CPU</li></ul></li></ul><h1 id="分级调度"><a href="#分级调度" class="headerlink" title="分级调度"></a>分级调度</h1><blockquote><p>三个调度：<br>• 长程调度决定把后备队列中的哪些作业调入内存，创建进程并加入相应的队列中<br>• 中程调度按一定的算法将“外存”中已具备条件的进程换入内存中，而将内存中处于阻塞状态的某些进程换出至外存<br>• 短程调度决定从就绪队列中哪一个进程应先获得处理器，并将处理机分配给选定的进程</p></blockquote><p><strong>长程调度是“作业-进程”之间的调度，中程调度是“挂起-激活”之间的调度，短程调度是“就绪-运行”之间的调度</strong></p><h2 id="长程调度"><a href="#长程调度" class="headerlink" title="长程调度"></a>长程调度</h2><p>长程调度（也叫高级调度、作业调度）</p><ul><li>长程调度决定哪一个程序何时可以进入到系统中处理</li><li>决策1：何时创建一个新进程。由要求的系统并发度驱动。创建的进程越多，每个进程可以执行的时间百分比就越小</li><li>决策2：加入哪一个新进程。基于简单的先来先服务原则、基于管理的系统性能的工具等（优先级、期待执行时间和I/O需求）</li><li>执行的频率最低</li></ul><h2 id="中程调度"><a href="#中程调度" class="headerlink" title="中程调度"></a>中程调度</h2><p>中程调度（也叫中级调度）</p><ul><li>为提高系统吞吐量和内存利用率而引入的内外存对换功能（换出    时，进程为挂起状态），主要涉及内存管理与扩充</li><li>将进程的部分或全部加载到内存中</li><li>换入决策基于管理多道程序并发程度的要求</li><li>执行的频率比长程调度要频繁些</li></ul><h2 id="短程调度"><a href="#短程调度" class="headerlink" title="短程调度"></a>短程调度</h2><p>短程调度（也叫低级调度、进程调度）</p><ul><li>执行得最频繁，要求在实现时达到高效率</li><li>短程调度程序也称作分派程序</li><li>主要任务：按照某种策略和方法选取一个处于就绪状态的进程占用处理机，包括<ul><li>保存处理机现场信息</li><li>按某种算法选取进程</li><li>把处理机分配给进程</li></ul></li><li>短程调度的三个基本机制：排队器、分派器、上下文切换机制</li></ul><hr><h2 id="引起调度的事件"><a href="#引起调度的事件" class="headerlink" title="引起调度的事件"></a>引起调度的事件</h2><ol><li>时钟中断（例如时间片用完）</li><li>I/O中断</li><li>操作系统调用</li><li>信号（例如在信号量上的wait操作，使进程阻塞）</li><li>抢占方式下，就绪队列中出现某更高优先权的进程</li></ol><hr><h1 id="常见的调度算法"><a href="#常见的调度算法" class="headerlink" title="常见的调度算法"></a>常见的调度算法</h1><h2 id="详细参考"><a href="#详细参考" class="headerlink" title="详细参考"></a><a href="https://blog.csdn.net/qq_38216239/article/details/80374539">详细参考</a></h2><h2 id="先来先服务-FCFS"><a href="#先来先服务-FCFS" class="headerlink" title="先来先服务(FCFS)"></a>先来先服务(FCFS)</h2><ul><li>按照进程就绪的先后顺序使用CPU</li><li><strong>特点</strong>：公平，实现简单(FIFO队列)。</li><li><strong>护航效果:</strong> 长进程后面的短进程需要等待很长时间，不利于用户体验</li></ul><h2 id="优先级调度"><a href="#优先级调度" class="headerlink" title="优先级调度"></a>优先级调度</h2><ul><li><p>静态优先级</p><ul><li>优先级确定后, 不会再变化</li></ul></li><li><p>动态优先级</p><ul><li><p>优先级与占有CPU时间的长短成反比, 与在就绪队列中等待的时间长短成正比</p></li><li><p>按理说, 等待很久的进程的优先级会慢慢升高, 确保大概率不会出现饥饿</p></li><li><p>优先级数字越小, 意味着优先级越高, 越先被调度</p><p>给每个作业一个优先级，优先级越高越紧迫，应该先执行。</p><p><strong>通常</strong>：系统进程优先级高于用户进程；前台进程优先级高于后台进程；操作系统更偏好 I/O型进程。</p><p><strong>特点</strong>：实现简单，但不公平，可能导致优先级低的进程产生饥饿现象；</p><p>可能产生优先级反转问题（基于优先级的抢占式算法），即一个低优先级进程持有一个高优先级进程所需要的资源，使得高优先级进程等待低优先级进程运行。</p></li></ul></li></ul><h2 id="最短作业优先-SJF"><a href="#最短作业优先-SJF" class="headerlink" title="最短作业优先(SJF)"></a>最短作业优先(SJF)</h2><ul><li><p>非抢占式</p><ul><li>具有最短完成时间的进程优先执行，非抢占</li><li>如果时间相同, 那么按FCFS, 先来先服务</li><li>**特点:**吞吐量提高, 但是对长进程不利, 并且事先知道执行时间很困难</li><li>常用于长程调度, 不常用于进程调度</li></ul></li><li><p>抢占式(最短剩余时间优先)</p><ul><li>当一个新就绪的进程比当前运行进程具有更短完成时间时，系统抢占当前进程，选择新就绪的进程执行</li><li>有最短的平均周转时间，但不公平，源源不断的短任务到来，可能使长的任务长时间得不到运行，从而产生 “饥饿”现象</li></ul></li></ul><h2 id="最高响应比优先-HRRN"><a href="#最高响应比优先-HRRN" class="headerlink" title="最高响应比优先(HRRN)"></a>最高响应比优先(HRRN)</h2><ul><li>是一个综合算法，调度时，首先计算每个进程的响应比R，之后总是选择R最高的进程执行。</li><li><strong>响应比R</strong> = 周转时间 / 处理时间 =（处理时间 + 等待时间）/ 处理时间 = 1 +（等待时间 / 处理时间)</li><li><strong>特点</strong>：折中权衡</li><li><strong>注意</strong>: 每次运行完一个进程后, 所有进程的等待时间会更新, 要重新计算R</li></ul><h2 id="轮转-Round-Robin——RR"><a href="#轮转-Round-Robin——RR" class="headerlink" title="轮转(Round Robin——RR)"></a>轮转(<em>R</em>ound <em>R</em>obin——<em>RR</em>)</h2><ul><li><p>每个进程被分配一个时间片，允许该进程在该时间段运行，如果在时间片结束时该进程还在运行，则剥夺CPU并分配给另一个进程，如果该进程在时间片结束前阻塞或结束，则CPU立即进行切换。</p></li><li><p>特点：公平；有利于交互式计算，响应时间快；由于进程切换，时间片轮转算法要花费较高的开销；对进程表中不同进程的大小差异较大的有利，而对进程都是相同大小的不利</p></li></ul><h2 id="多级反馈轮转"><a href="#多级反馈轮转" class="headerlink" title="多级反馈轮转"></a>多级反馈轮转</h2><p><img src="https://s1.ax1x.com/2020/10/28/B8edds.png" alt="多级反馈队列调度" title="调度算法总结比较"></p><ul><li><p>设置多个就绪队列，并为各个队列赋予不同的优先级。</p></li><li><p>第一个队列的优先级最高，依次递减优先级。对于各个队列进程执行时间片的大小也不同，优先级越高的队列，分配到的时间片越少。</p></li><li><p>当第一级队列为空时，再第二级队列进行调度，依次类推，各级队列按照时间片轮转方式进行调度。</p></li><li><p>当一个新进程创建后，首先把它放入第一队列的末尾。按照FCFS原则排队等待调度。当轮到该进程执行时，如它在该时间片完成，便可准备撤离系统，如果它在一个时间片结束时尚未完成，则调度程序便将该进程转入第二队列的末尾，再同样地按照FCFS原则等待调度执行。依次类推。</p></li><li><p><strong>特点</strong>：更偏好I/O型进程，对CPU型进程不太友好。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://s1.ax1x.com/2020/10/28/B8eaZj.png" alt="调度算法总结比较" title="调度算法总结比较"></p><hr><h1 id="多处理器调度"><a href="#多处理器调度" class="headerlink" title="多处理器调度"></a>多处理器调度</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li><strong>非对称多处理(AM)</strong><ul><li>让一个主处理器处理所有调度决定、I/O处理以及其他系统活动, 其他处理器只执行用户代码</li><li>只有一个处理器访问系统数据结构，减少了数据共享的需要</li></ul></li><li><strong>对称多处理(SMP)</strong><ul><li>每个处理器自我调度</li><li>所有进程可能处在一个共同的就绪队列中，也可能每个处理器都有自己私有的就绪队列。无论怎样，每个处理器的调度程序都检查<strong>共同就绪队列</strong>，以便选择执行一个进程</li></ul></li></ol><h2 id="处理器亲和性"><a href="#处理器亲和性" class="headerlink" title="处理器亲和性"></a>处理器亲和性</h2><blockquote><p>​    当一个进程运行在一个特定的处理器上时会缓存该进程的一些数据和上下文，如果进程被迁移到另外一个处理器上，那么上一个处理器上缓存的数据设为无效，第二个处理器缓存应刷新。由于这些操作代价很高， 所以大多数SMP系统试图<strong>避免进程从一个处理器迁移另一个处理器</strong>。这叫做处理器的亲和性。</p></blockquote><h3 id="软亲和性"><a href="#软亲和性" class="headerlink" title="软亲和性"></a>软亲和性</h3><ul><li>当一个操作系统试图保持进程运行在同一处理器上，但是这个进程也可以迁移到其他进程上</li></ul><h3 id="硬亲和性"><a href="#硬亲和性" class="headerlink" title="硬亲和性"></a>硬亲和性</h3><ul><li>操作系统提供系统调用来支持使某个进程运行在某个处理器子集中</li></ul><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><blockquote><p>对于SMP系统，重要的是保持所有处理器的负载平衡，以便充分利用多处理器的优点.  否则, 一个或多个处理器总是很闲, 其他处理器反而处于高负载状态</p></blockquote><h3 id="保持负载均衡的方法"><a href="#保持负载均衡的方法" class="headerlink" title="保持负载均衡的方法"></a>保持负载均衡的方法</h3><ol><li><p>推迁移:</p><p>一个特定的任务周期性地检查每个处理器的负载，如果发现不平衡，那么通过将进程从超载处理器推到空闲或不太忙的处理器，从而平均分配负载</p></li><li><p>拉迁移</p><p>空闲处理器从一个忙的处理器上拉一个等待任务</p></li></ol><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>   <strong>负载均衡往往会抵消处理器亲和性的好处。</strong></p>]]></content>
    
    
    <summary type="html">重庆大学&lt;&lt;操作系统&gt;&gt;课程 第六章总结</summary>
    
    
    
    <category term="操作系统" scheme="http://duan8.xyz/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="调度算法" scheme="http://duan8.xyz/tags/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    
    <category term="课程笔记" scheme="http://duan8.xyz/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="操作系统" scheme="http://duan8.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>OJ小技巧</title>
    <link href="http://duan8.xyz/posts/a031e9bb.html"/>
    <id>http://duan8.xyz/posts/a031e9bb.html</id>
    <published>2020-10-27T05:47:51.000Z</published>
    <updated>2020-10-27T13:07:09.676Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了一些在刷题时比较有用的小技巧, 会持续更新, 建议你添加到收藏夹.</p></blockquote><hr><h1 id="万能头文件"><a href="#万能头文件" class="headerlink" title="万能头文件"></a>万能头文件</h1><p>我们在用<code>C++</code>刷<strong>OJ</strong>时, 会<code>#include</code>很多头文件, 有时候可能会忘记某个函数所属的头文件, 很搞心态.</p><p><code>C++</code>的头文件<code>bits/stdc++.h</code>，几乎包含了所有<code>C++</code>库函数.</p><p>通过<code>#include &lt;bits/stdc++.h&gt;</code>这一行代码即可省略添加头文件的烦人工作.</p><p>优缺点如下:</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><p>在竞赛中节约时间</p></li><li><p>减少了编写所有必要头文件的工作量</p></li><li><p>对于使用的每个函数，不用记住GNU C++的所有STL</p></li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li><p>不是所有OJ平台都支持这个头文件(兼容性)</p></li><li><p>不属于GNU C++库的标准头文件，在部分情况下可能会失败</p></li><li><p>VS Code 和 DevCpp 不原生包含该头文件, 需要自己简单配置</p></li><li><p>使用它将包含许多不必要的东西，并增加编译时间</p></li><li><p>这个头文件不是C++标准的一部分，因此是不可移植的，应该避免</p></li><li><p>编译器每次编译翻译单元时都必须实际读取和分析每个包含的头文件，应该减少这类头文件的使用</p></li><li><p>万能头文件要占一部分空间，对于一些卡空间的题目不友好</p></li><li><p>万能头文件<code>include</code>了很多玄学的东西，可能导致你变量定义重复导致诡异的CE</p></li></ul><h2 id="部分平台兼容性"><a href="#部分平台兼容性" class="headerlink" title="部分平台兼容性"></a>部分平台兼容性</h2><ul><li><p>PTA<strong>支持</strong></p></li><li><p>DOTCPP<strong>支持</strong></p></li><li><p>洛谷<strong>支持</strong></p></li><li><p>POJ<strong>不支持</strong></p></li><li><p>HDU<strong>部分支持</strong>（G++支持，C++不支持）</p></li><li><p>Codeforces<strong>支持</strong></p></li><li><p>Topcoder<strong>支持</strong></p></li><li><p>大部分主流OJ平台都支持</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上, 这个头文件更适合在<strong>OJ</strong>比赛中使用。在日常开发中，我们应该尽可能不使用它，以控制编译时间和代码大小.</p><hr><h1 id="freopen重定向"><a href="#freopen重定向" class="headerlink" title="freopen重定向"></a><code>freopen</code>重定向</h1><p>调试程序时, 每次都要手动去复制粘贴样例输入, 非常麻烦.</p><p>利用<code>C++</code>的**<code>freopen</code>**函数即可替我们省去<code>Ctrl+C</code>、<code>Ctrl+V</code>的繁琐操作.</p><p><strong><code>freopen(&quot;文件名&quot;,&quot;r&quot;,stdin);</code></strong></p><ul><li>第一个参数为存储输入数据的文件的路径</li><li>第二个参数<code>“r”</code>表示read, 即从该文件读入数据</li><li>第三个参数<code>stdin</code>表示标准输入流, 也就是将程序输入从标准输入流(键盘)改为第一个参数所指定的文件</li></ul><p>我们可以把这行代码写在<code>main</code>函数的第一行, 因为一般来说, 读入数据都在<code>main</code>函数的起始处.</p><p>以下为代码示例:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A+B Problem</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;duan.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>); <span class="comment">//此后所有输入都来自duan.in, 当然, 你也可以使用a.txt等等.</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c = a + b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中, “duan.in”的文件内容为:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2</span><br><span class="line">3 4</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure><p>程序输出为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p>出于某些原因(输出数据太多, 难以显示完整等等), 我们希望<strong>程序的输出结果能够储存在某个文件中</strong>, 我们通常会对输出进行复制, 然后粘贴到文件中.</p><p><strong>现在, 大可不必.</strong></p><p>接下来为你介绍<code>freopen</code>函数的另一用法.</p><p><strong><code>freopen(&quot;文件名&quot;,&quot;w&quot;,stdout);</code></strong></p><ul><li>第一个参数为用于保存输出的文件的路径</li><li>第二个参数<code>“w”</code>表示write, 即向该文件写入数据</li><li>第三个参数<code>stdout</code>表示标准输出流, 也就是将程序的输出从标准输出流(控制台)改为第一个参数所指定的文件</li></ul><p>我们对上文中的代码进行修改:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A+B Problem</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;duan.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>); <span class="comment">//此后所有输入都来自duan.in, 当然, 你也可以使用a.txt等等.</span></span><br><span class="line">    freopen(<span class="string">&quot;duan.out&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>); <span class="comment">//此后所有输出都写入duan.out</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c = a + b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后, 控制台没有任何输出.</p><p>我们查看<code>duan.out</code>文件, 内容如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p>内容符合预期.</p><hr><h1 id="无穷大常量的设定"><a href="#无穷大常量的设定" class="headerlink" title="无穷大常量的设定"></a>无穷大常量的设定</h1><blockquote><p>我们经常会定义一些无穷大常量, 比如用于图论中表示两点之间没有路径等等.</p><blockquote><p>下文中采用<code>INF</code>表示无穷大常量</p></blockquote></blockquote><h2 id="999999999"><a href="#999999999" class="headerlink" title="999999999"></a>999999999</h2><p>对于初学者而言, 经常会用类似<code>999999999</code>之类的数表示<code>INF</code>, 其实, 这并不好. 一方面, 一些变态题目中给的数据可能比这个还要大; 另一方面, 这样显得很不专业(这才是真正原因).</p><p>因此, 尽量减少使用<code>999999999</code>, 尽管这输入起来很快, 很爽.</p><h2 id="0x7fffffff"><a href="#0x7fffffff" class="headerlink" title="0x7fffffff"></a>0x7fffffff</h2><p>很多程序员都喜欢设<code>INF</code>为<code>0x7fffffff</code>，因为这是32-bit<code>int</code>的最大值。</p><p>如果这个无穷大只用于一般的比较（比如求最小值时min变量的初值），那么0x7fffffff确实是一个完美的选择，但是在更多的情况 下，0x7fffffff并不是一个好的选择。</p><ul><li>很多时候我们并不只是单纯拿无穷大来作比较，而是会运算后再做比较，例如在大部分最短路径算法中都会使用的松弛操作：<br><code>if (d[u]+w[u][v]&lt;d[v]) d[v]=d[u]+w[u][v];</code><br>我们知道如果<code>u</code>,<code>v</code>之间没有边，那么<code>w[u][v]=INF</code>，如果我们的<code>INF</code>取<code>0x7fffffff</code>，那么<code>d[u]+w[u][v]</code>会溢出而变成负数， 我们的松弛操作便出错了。更一般的说，<code>0x7fffffff</code>不能满足“无穷大加一个有穷的数依然是无穷大”，反而, 它变成了一个很小的负数。</li><li>除了要满足加上一个常数依然是无穷大之外，我们的常量还应该满足“无穷大加无穷大依然是无穷大”，至少两个无穷大相加不应该出现灾难性的错误，这一点上<code>0x7fffffff</code>依然不能满足我们。</li></ul><p>综上, <code>0x7fffffff</code>也不是一个很好的选择.</p><h2 id="0x3f3f3f3f"><a href="#0x3f3f3f3f" class="headerlink" title="0x3f3f3f3f"></a>0x3f3f3f3f</h2><p>我们需要一个更好的家伙来顶替<code>0x7fffffff</code>，最严谨的办法当然是对无穷大进行特别处理而不是找一个很大很大的常量来代替它（或者说模拟它），但是这样会让我们的编程过程变得很麻烦。</p><p>最精巧的无穷大常量取值是<code>0x3f3f3f3f</code>，以下我会对这个常量做更深入的分析，你一定会体会其精巧之处。</p><ul><li>一方面, <code>0x3f3f3f3f</code>的十进制是<code>1061109567</code>，也就是<code>10^9</code>级别（和<code>0x7fffffff</code>一个数量级），而一般场合下的数据都是小于<code>10^9</code> 的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。</li><li>另一方面，由于一般的数据都不会大于<code>10^9</code>，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上<code>0x3f3f3f3f</code>+<code>0x3f3f3f3f</code>=<code>2122219134，这非常大但却没有超过32-bit </code>int<code>的表示范围，所以</code>0x3f3f3f3f`还满足了我们“无穷大加无穷大还是无穷大”的需求。</li><li>最后，<code>0x3f3f3f3f</code>还能给我们带来一个意想不到的额外好处：如果我们想要将某个数组清零，我们通常会使用 <code>memset(a,0,sizeof(a))</code>这样的代码来实现（方便而高效），但是当我们想将某个数组全部赋值为无穷大时（例如解决图论问题时邻接矩阵的 初始化），就不能使用<code>memset</code>函数而得自己写循环了（写这些不重要的代码真的很痛苦），我们知道这是因为<code>memset</code>是按字节操作的，它能够对数组清零是因为0的每个字节都是0，现在好了，如果我们将无穷大设为<code>0x3f3f3f3f</code>，那么奇迹就发生了，<code>0x3f3f3f3f</code>的每个字节都是<code>0x3f</code>！所 以要把一段内存全部置为无穷大，我们只需要<code>memset(a,0x3f,sizeof(a))</code>。</li></ul><p>所以, 在通常的场合下，<code>0x3f3f3f3f</code>真的是一个非常棒的选择。</p><p><strong>综合比较之下, <code>0x3f3f3f3f</code>完美胜出.</strong></p><hr><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    
    <summary type="html">OJ中常用的一些小技巧 [持续更新中]</summary>
    
    
    
    <category term="OJ题解" scheme="http://duan8.xyz/categories/OJ%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="OJ" scheme="http://duan8.xyz/tags/OJ/"/>
    
    <category term="技巧" scheme="http://duan8.xyz/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="C++" scheme="http://duan8.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>cat</title>
    <link href="http://duan8.xyz/posts/9e5e43a8.html"/>
    <id>http://duan8.xyz/posts/9e5e43a8.html</id>
    <published>2020-10-25T18:35:34.000Z</published>
    <updated>2020-10-25T19:12:41.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-will-show-cat"><a href="#I-will-show-cat" class="headerlink" title="I will show cat"></a>I will show cat</h1><img src="/posts/9e5e43a8/cat.jpg" class="" title><h1 id="cover"><a href="#cover" class="headerlink" title="cover: "></a>cover: <img src="/posts/9e5e43a8/cat.jpg" class="" title></h1><p>#top_img: <img src="/posts/9e5e43a8/cat.jpg" class="" title></p><p>hello</p><img src="/posts/9e5e43a8/cat.jpg" class="" title><p><img src="https://wallroom.io/img/1920x1080/bg-8199743.jpg" alt="this is a exampl"></p>]]></content>
    
    
    <summary type="html">this is a test md</summary>
    
    
    
    <category term="test" scheme="http://duan8.xyz/categories/test/"/>
    
    
    <category term="test" scheme="http://duan8.xyz/tags/test/"/>
    
    <category term="hello" scheme="http://duan8.xyz/tags/hello/"/>
    
  </entry>
  
  <entry>
    <title>showcat</title>
    <link href="http://duan8.xyz/posts/28de7afc.html"/>
    <id>http://duan8.xyz/posts/28de7afc.html</id>
    <published>2020-10-25T18:15:34.000Z</published>
    <updated>2020-10-26T03:41:02.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-will-show-cat"><a href="#I-will-show-cat" class="headerlink" title="I will show cat"></a>I will show cat</h1><p><img src="/cat/cat.jpg" alt="cat"></p><h1 id="cover"><a href="#cover" class="headerlink" title="cover: "></a>cover: <img src="/cat/cat.jpg" alt="cat"></h1><p>#top_img: <img src="/cat/cat.jpg" alt="cat"></p><p>hello</p>]]></content>
    
    
    <summary type="html">this is a test md</summary>
    
    
    
    <category term="test" scheme="http://duan8.xyz/categories/test/"/>
    
    
    <category term="test" scheme="http://duan8.xyz/tags/test/"/>
    
    <category term="hello" scheme="http://duan8.xyz/tags/hello/"/>
    
  </entry>
  
  <entry>
    <title>博客指南</title>
    <link href="http://duan8.xyz/posts/4a17b156.html"/>
    <id>http://duan8.xyz/posts/4a17b156.html</id>
    <published>2020-10-20T17:54:14.230Z</published>
    <updated>2020-10-28T15:16:43.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>欢迎来到我的博客, 接下来我将为你简要介绍.</p></blockquote><hr><h1 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h1><h2 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h2><p>本博客的内容主要包含:</p><ul><li>技术分享</li><li>O J 题解</li><li>课程笔记</li><li>日常分享</li><li>个人总结</li><li>学习体会</li></ul><hr><h2 id="域名由来"><a href="#域名由来" class="headerlink" title="域名由来"></a>域名由来</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">duan8.xyz</span><br></pre></td></tr></table></figure><p>这个域名简短, 易于记忆, 朗朗上口, 同时也有谐音”<strong>段吧</strong>“之意, 一方面作为我的个人博客, 另一方面希望大家能够在”<strong>段吧</strong>“进行各方面的交流, 像一个贴吧一样.<br>因为这个博客目前是挂载到<code>Github</code>上的, 所以国内部分地区访问该网站会比较慢, 可以通过访问博客的另一地址 <a href="vayneduan.gitee.io">vayneduan.gitee.io</a> 来获得更好的阅读体验, 建议两个地址都收藏.</p><hr><h2 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>你可以通过输入关键字来搜索文章内容, 获取相关文章</p><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>你可以通过<strong>关于</strong>页面来了解我的个人信息, 并且获得我的联系方式</p><h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><p>查看按发表日期排序的所有文章</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>查看所有文章涉及到的标签, 由标签来获取相关文章<br>标签通常是文章的关键词, 比较离散.</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>查看所有文章涉及到的分类, 由分类来获取相关文章<br>分类会涉及到二级分类, 相比标签来说, 更有层次性.</p><h3 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h3><h4 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h4><p>分享我喜欢的音乐</p><h4 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h4><p>分享我喜欢的电影、资源链接、我的影评</p><h3 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h3><p>你可以在留言板发表任何友好内容<br>包括但不限于:</p><ul><li>和博主扯淡</li><li>对博客的建议</li><li>你的疑问</li><li>想看的内容</li><li>指正错误之处</li></ul><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p>分享一些有意义的博客链接和网站</p>]]></content>
    
    
    <summary type="html">如果你是第一次来到这个网站, 建议先阅读这篇&lt;&lt;博客指南&gt;&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="http://duan8.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="博客指南" scheme="http://duan8.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
</feed>
